// @generated by protoc-gen-es v1.5.0 with parameter "target=ts"
// @generated from file bag.proto (package bag, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message bag.App
 */
export class App extends Message<App> {
  /**
   * @generated from field: optional int32 id = 1;
   */
  id?: number;

  /**
   * @generated from field: optional string name = 2;
   */
  name?: string;

  /**
   * @generated from field: optional string description = 3;
   */
  description?: string;

  /**
   * @generated from field: optional string permissions = 4;
   */
  permissions?: string;

  /**
   * @generated from field: optional bool public = 5;
   */
  public?: boolean;

  /**
   * @generated from field: optional string metadata = 6;
   */
  metadata?: string;

  constructor(data?: PartialMessage<App>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bag.App";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "permissions", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "public", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 6, name: "metadata", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): App {
    return new App().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): App {
    return new App().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): App {
    return new App().fromJsonString(jsonString, options);
  }

  static equals(a: App | PlainMessage<App> | undefined, b: App | PlainMessage<App> | undefined): boolean {
    return proto3.util.equals(App, a, b);
  }
}

/**
 * @generated from message bag.Item
 */
export class Item extends Message<Item> {
  /**
   * @generated from field: optional string name = 1;
   */
  name?: string;

  /**
   * @generated from field: optional string image = 2;
   */
  image?: string;

  /**
   * @generated from field: optional string description = 3;
   */
  description?: string;

  /**
   * @generated from field: optional string reaction = 4;
   */
  reaction?: string;

  /**
   * @generated from field: optional bool commodity = 5;
   */
  commodity?: boolean;

  /**
   * @generated from field: optional bool tradable = 6;
   */
  tradable?: boolean;

  /**
   * @generated from field: optional bool public = 7;
   */
  public?: boolean;

  /**
   * @generated from field: optional string metadata = 8;
   */
  metadata?: string;

  constructor(data?: PartialMessage<Item>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bag.Item";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "image", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "reaction", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "commodity", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 6, name: "tradable", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 7, name: "public", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 8, name: "metadata", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Item {
    return new Item().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Item {
    return new Item().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Item {
    return new Item().fromJsonString(jsonString, options);
  }

  static equals(a: Item | PlainMessage<Item> | undefined, b: Item | PlainMessage<Item> | undefined): boolean {
    return proto3.util.equals(Item, a, b);
  }
}

/**
 * @generated from message bag.Skill
 */
export class Skill extends Message<Skill> {
  /**
   * @generated from field: optional string name = 1;
   */
  name?: string;

  /**
   * @generated from field: optional int32 maxLevel = 2;
   */
  maxLevel?: number;

  /**
   * @generated from field: optional string description = 3;
   */
  description?: string;

  /**
   * @generated from field: optional string reaction = 4;
   */
  reaction?: string;

  /**
   * @generated from field: optional string metadata = 5;
   */
  metadata?: string;

  constructor(data?: PartialMessage<Skill>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bag.Skill";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "maxLevel", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "reaction", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "metadata", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Skill {
    return new Skill().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Skill {
    return new Skill().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Skill {
    return new Skill().fromJsonString(jsonString, options);
  }

  static equals(a: Skill | PlainMessage<Skill> | undefined, b: Skill | PlainMessage<Skill> | undefined): boolean {
    return proto3.util.equals(Skill, a, b);
  }
}

/**
 * @generated from message bag.Identity
 */
export class Identity extends Message<Identity> {
  /**
   * @generated from field: optional string slack = 1;
   */
  slack?: string;

  /**
   * @generated from field: repeated bag.Instance inventory = 2;
   */
  inventory: Instance[] = [];

  /**
   * @generated from field: optional string metadata = 3;
   */
  metadata?: string;

  constructor(data?: PartialMessage<Identity>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bag.Identity";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "slack", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "inventory", kind: "message", T: Instance, repeated: true },
    { no: 3, name: "metadata", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Identity {
    return new Identity().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Identity {
    return new Identity().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Identity {
    return new Identity().fromJsonString(jsonString, options);
  }

  static equals(a: Identity | PlainMessage<Identity> | undefined, b: Identity | PlainMessage<Identity> | undefined): boolean {
    return proto3.util.equals(Identity, a, b);
  }
}

/**
 * @generated from message bag.Instance
 */
export class Instance extends Message<Instance> {
  /**
   * @generated from field: optional int32 id = 1;
   */
  id?: number;

  /**
   * @generated from field: optional string itemId = 2;
   */
  itemId?: string;

  /**
   * @generated from field: optional string identityId = 3;
   */
  identityId?: string;

  /**
   * @generated from field: optional int32 quantity = 4;
   */
  quantity?: number;

  /**
   * @generated from field: optional string metadata = 5;
   */
  metadata?: string;

  /**
   * @generated from field: optional bag.Item item = 6;
   */
  item?: Item;

  constructor(data?: PartialMessage<Instance>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bag.Instance";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 2, name: "itemId", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "identityId", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "quantity", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 5, name: "metadata", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 6, name: "item", kind: "message", T: Item, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Instance {
    return new Instance().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Instance {
    return new Instance().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Instance {
    return new Instance().fromJsonString(jsonString, options);
  }

  static equals(a: Instance | PlainMessage<Instance> | undefined, b: Instance | PlainMessage<Instance> | undefined): boolean {
    return proto3.util.equals(Instance, a, b);
  }
}

/**
 * @generated from message bag.SkillInstance
 */
export class SkillInstance extends Message<SkillInstance> {
  /**
   * @generated from field: optional int32 id = 1;
   */
  id?: number;

  /**
   * @generated from field: optional string skillId = 2;
   */
  skillId?: string;

  /**
   * @generated from field: optional string identityId = 3;
   */
  identityId?: string;

  /**
   * @generated from field: optional int32 level = 4;
   */
  level?: number;

  /**
   * @generated from field: optional string metadata = 5;
   */
  metadata?: string;

  /**
   * @generated from field: optional bag.Skill skill = 6;
   */
  skill?: Skill;

  constructor(data?: PartialMessage<SkillInstance>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bag.SkillInstance";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 2, name: "skillId", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "identityId", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "level", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 5, name: "metadata", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 6, name: "skill", kind: "message", T: Skill, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SkillInstance {
    return new SkillInstance().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SkillInstance {
    return new SkillInstance().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SkillInstance {
    return new SkillInstance().fromJsonString(jsonString, options);
  }

  static equals(a: SkillInstance | PlainMessage<SkillInstance> | undefined, b: SkillInstance | PlainMessage<SkillInstance> | undefined): boolean {
    return proto3.util.equals(SkillInstance, a, b);
  }
}

/**
 * @generated from message bag.Trade
 */
export class Trade extends Message<Trade> {
  /**
   * @generated from field: optional int32 id = 1;
   */
  id?: number;

  /**
   * @generated from field: optional string initiatorIdentityId = 2;
   */
  initiatorIdentityId?: string;

  /**
   * @generated from field: optional string receiverIdentityId = 3;
   */
  receiverIdentityId?: string;

  /**
   * @generated from field: repeated bag.TradeInstance initiatorTrades = 4;
   */
  initiatorTrades: TradeInstance[] = [];

  /**
   * @generated from field: repeated bag.TradeInstance receiverTrades = 5;
   */
  receiverTrades: TradeInstance[] = [];

  /**
   * @generated from field: optional bool public = 6;
   */
  public?: boolean;

  /**
   * @generated from field: optional bool closed = 7;
   */
  closed?: boolean;

  constructor(data?: PartialMessage<Trade>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bag.Trade";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 2, name: "initiatorIdentityId", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "receiverIdentityId", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "initiatorTrades", kind: "message", T: TradeInstance, repeated: true },
    { no: 5, name: "receiverTrades", kind: "message", T: TradeInstance, repeated: true },
    { no: 6, name: "public", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 7, name: "closed", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Trade {
    return new Trade().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Trade {
    return new Trade().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Trade {
    return new Trade().fromJsonString(jsonString, options);
  }

  static equals(a: Trade | PlainMessage<Trade> | undefined, b: Trade | PlainMessage<Trade> | undefined): boolean {
    return proto3.util.equals(Trade, a, b);
  }
}

/**
 * @generated from message bag.TradeInstance
 */
export class TradeInstance extends Message<TradeInstance> {
  /**
   * @generated from field: optional int32 id = 1;
   */
  id?: number;

  /**
   * @generated from field: optional int32 instanceId = 2;
   */
  instanceId?: number;

  /**
   * @generated from field: optional bag.Instance instance = 3;
   */
  instance?: Instance;

  /**
   * @generated from field: optional int32 quantity = 4;
   */
  quantity?: number;

  constructor(data?: PartialMessage<TradeInstance>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bag.TradeInstance";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 2, name: "instanceId", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 3, name: "instance", kind: "message", T: Instance, opt: true },
    { no: 4, name: "quantity", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TradeInstance {
    return new TradeInstance().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TradeInstance {
    return new TradeInstance().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TradeInstance {
    return new TradeInstance().fromJsonString(jsonString, options);
  }

  static equals(a: TradeInstance | PlainMessage<TradeInstance> | undefined, b: TradeInstance | PlainMessage<TradeInstance> | undefined): boolean {
    return proto3.util.equals(TradeInstance, a, b);
  }
}

/**
 * @generated from message bag.RecipeItem
 */
export class RecipeItem extends Message<RecipeItem> {
  /**
   * @generated from field: optional int32 id = 1;
   */
  id?: number;

  /**
   * @generated from field: optional string recipeItemId = 2;
   */
  recipeItemId?: string;

  /**
   * @generated from field: optional bag.Item recipeItem = 3;
   */
  recipeItem?: Item;

  /**
   * @generated from field: optional int32 quantity = 4;
   */
  quantity?: number;

  constructor(data?: PartialMessage<RecipeItem>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bag.RecipeItem";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 2, name: "recipeItemId", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "recipeItem", kind: "message", T: Item, opt: true },
    { no: 4, name: "quantity", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RecipeItem {
    return new RecipeItem().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RecipeItem {
    return new RecipeItem().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RecipeItem {
    return new RecipeItem().fromJsonString(jsonString, options);
  }

  static equals(a: RecipeItem | PlainMessage<RecipeItem> | undefined, b: RecipeItem | PlainMessage<RecipeItem> | undefined): boolean {
    return proto3.util.equals(RecipeItem, a, b);
  }
}

/**
 * @generated from message bag.Recipe
 */
export class Recipe extends Message<Recipe> {
  /**
   * @generated from field: optional int32 id = 1;
   */
  id?: number;

  /**
   * @generated from field: repeated bag.RecipeItem inputs = 2;
   */
  inputs: RecipeItem[] = [];

  /**
   * @generated from field: repeated bag.RecipeItem outputs = 3;
   */
  outputs: RecipeItem[] = [];

  /**
   * @generated from field: repeated bag.RecipeItem tools = 4;
   */
  tools: RecipeItem[] = [];

  /**
   * @generated from field: repeated bag.Skill skills = 5;
   */
  skills: Skill[] = [];

  /**
   * @generated from field: optional bool public = 6;
   */
  public?: boolean;

  /**
   * @generated from field: optional string description = 7;
   */
  description?: string;

  /**
   * @generated from field: optional int32 time = 8;
   */
  time?: number;

  constructor(data?: PartialMessage<Recipe>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bag.Recipe";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 2, name: "inputs", kind: "message", T: RecipeItem, repeated: true },
    { no: 3, name: "outputs", kind: "message", T: RecipeItem, repeated: true },
    { no: 4, name: "tools", kind: "message", T: RecipeItem, repeated: true },
    { no: 5, name: "skills", kind: "message", T: Skill, repeated: true },
    { no: 6, name: "public", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 7, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 8, name: "time", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Recipe {
    return new Recipe().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Recipe {
    return new Recipe().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Recipe {
    return new Recipe().fromJsonString(jsonString, options);
  }

  static equals(a: Recipe | PlainMessage<Recipe> | undefined, b: Recipe | PlainMessage<Recipe> | undefined): boolean {
    return proto3.util.equals(Recipe, a, b);
  }
}

/**
 * @generated from message bag.Action
 */
export class Action extends Message<Action> {
  /**
   * @generated from field: optional int32 id = 1;
   */
  id?: number;

  /**
   * @generated from field: repeated string locations = 2;
   */
  locations: string[] = [];

  /**
   * @generated from field: repeated string tools = 3;
   */
  tools: string[] = [];

  /**
   * @generated from field: optional string branch = 4;
   */
  branch?: string;

  constructor(data?: PartialMessage<Action>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bag.Action";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 2, name: "locations", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "tools", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "branch", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Action {
    return new Action().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Action {
    return new Action().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Action {
    return new Action().fromJsonString(jsonString, options);
  }

  static equals(a: Action | PlainMessage<Action> | undefined, b: Action | PlainMessage<Action> | undefined): boolean {
    return proto3.util.equals(Action, a, b);
  }
}

/**
 * @generated from message bag.ActionInstance
 */
export class ActionInstance extends Message<ActionInstance> {
  /**
   * @generated from field: optional int32 id = 1;
   */
  id?: number;

  /**
   * @generated from field: optional bool done = 2;
   */
  done?: boolean;

  /**
   * @generated from field: optional string identityId = 3;
   */
  identityId?: string;

  /**
   * @generated from field: optional bag.Identity identity = 4;
   */
  identity?: Identity;

  /**
   * @generated from field: optional int32 actionId = 5;
   */
  actionId?: number;

  /**
   * @generated from field: optional bag.Action action = 6;
   */
  action?: Action;

  constructor(data?: PartialMessage<ActionInstance>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bag.ActionInstance";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 2, name: "done", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 3, name: "identityId", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "identity", kind: "message", T: Identity, opt: true },
    { no: 5, name: "actionId", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 6, name: "action", kind: "message", T: Action, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ActionInstance {
    return new ActionInstance().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ActionInstance {
    return new ActionInstance().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ActionInstance {
    return new ActionInstance().fromJsonString(jsonString, options);
  }

  static equals(a: ActionInstance | PlainMessage<ActionInstance> | undefined, b: ActionInstance | PlainMessage<ActionInstance> | undefined): boolean {
    return proto3.util.equals(ActionInstance, a, b);
  }
}

/**
 * @generated from message bag.OfferItem
 */
export class OfferItem extends Message<OfferItem> {
  /**
   * @generated from field: optional string itemName = 1;
   */
  itemName?: string;

  /**
   * @generated from field: optional int32 quantity = 2;
   */
  quantity?: number;

  constructor(data?: PartialMessage<OfferItem>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bag.OfferItem";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "itemName", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "quantity", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OfferItem {
    return new OfferItem().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OfferItem {
    return new OfferItem().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OfferItem {
    return new OfferItem().fromJsonString(jsonString, options);
  }

  static equals(a: OfferItem | PlainMessage<OfferItem> | undefined, b: OfferItem | PlainMessage<OfferItem> | undefined): boolean {
    return proto3.util.equals(OfferItem, a, b);
  }
}

/**
 * @generated from message bag.CreateInstancesRequest
 */
export class CreateInstancesRequest extends Message<CreateInstancesRequest> {
  /**
   * @generated from field: int32 appId = 1;
   */
  appId = 0;

  /**
   * @generated from field: string key = 2;
   */
  key = "";

  /**
   * @generated from field: repeated bag.Instance instances = 3;
   */
  instances: Instance[] = [];

  /**
   * @generated from field: string identityId = 4;
   */
  identityId = "";

  /**
   * @generated from field: optional bool show = 5;
   */
  show?: boolean;

  /**
   * @generated from field: optional string note = 6;
   */
  note?: string;

  constructor(data?: PartialMessage<CreateInstancesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bag.CreateInstancesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "appId", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "instances", kind: "message", T: Instance, repeated: true },
    { no: 4, name: "identityId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "show", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 6, name: "note", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateInstancesRequest {
    return new CreateInstancesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateInstancesRequest {
    return new CreateInstancesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateInstancesRequest {
    return new CreateInstancesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateInstancesRequest | PlainMessage<CreateInstancesRequest> | undefined, b: CreateInstancesRequest | PlainMessage<CreateInstancesRequest> | undefined): boolean {
    return proto3.util.equals(CreateInstancesRequest, a, b);
  }
}

/**
 * @generated from message bag.CreateInstancesResponse
 */
export class CreateInstancesResponse extends Message<CreateInstancesResponse> {
  /**
   * @generated from field: optional string response = 1;
   */
  response?: string;

  /**
   * @generated from field: repeated bag.Instance instances = 2;
   */
  instances: Instance[] = [];

  constructor(data?: PartialMessage<CreateInstancesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bag.CreateInstancesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "instances", kind: "message", T: Instance, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateInstancesResponse {
    return new CreateInstancesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateInstancesResponse {
    return new CreateInstancesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateInstancesResponse {
    return new CreateInstancesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateInstancesResponse | PlainMessage<CreateInstancesResponse> | undefined, b: CreateInstancesResponse | PlainMessage<CreateInstancesResponse> | undefined): boolean {
    return proto3.util.equals(CreateInstancesResponse, a, b);
  }
}

/**
 * @generated from message bag.CreateInstanceRequest
 */
export class CreateInstanceRequest extends Message<CreateInstanceRequest> {
  /**
   * @generated from field: int32 appId = 1;
   */
  appId = 0;

  /**
   * @generated from field: string key = 2;
   */
  key = "";

  /**
   * @generated from field: string itemId = 3;
   */
  itemId = "";

  /**
   * @generated from field: string identityId = 4;
   */
  identityId = "";

  /**
   * @generated from field: int32 quantity = 5;
   */
  quantity = 0;

  /**
   * @generated from field: optional string metadata = 6;
   */
  metadata?: string;

  /**
   * @generated from field: optional bool public = 7;
   */
  public?: boolean;

  /**
   * @generated from field: optional bool show = 8;
   */
  show?: boolean;

  /**
   * @generated from field: optional string note = 9;
   */
  note?: string;

  constructor(data?: PartialMessage<CreateInstanceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bag.CreateInstanceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "appId", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "itemId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "identityId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "quantity", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "metadata", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 7, name: "public", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 8, name: "show", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 9, name: "note", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateInstanceRequest {
    return new CreateInstanceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateInstanceRequest {
    return new CreateInstanceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateInstanceRequest {
    return new CreateInstanceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateInstanceRequest | PlainMessage<CreateInstanceRequest> | undefined, b: CreateInstanceRequest | PlainMessage<CreateInstanceRequest> | undefined): boolean {
    return proto3.util.equals(CreateInstanceRequest, a, b);
  }
}

/**
 * @generated from message bag.CreateInstanceResponse
 */
export class CreateInstanceResponse extends Message<CreateInstanceResponse> {
  /**
   * @generated from field: optional string response = 1;
   */
  response?: string;

  /**
   * @generated from field: optional bag.Instance instance = 2;
   */
  instance?: Instance;

  constructor(data?: PartialMessage<CreateInstanceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bag.CreateInstanceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "instance", kind: "message", T: Instance, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateInstanceResponse {
    return new CreateInstanceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateInstanceResponse {
    return new CreateInstanceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateInstanceResponse {
    return new CreateInstanceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateInstanceResponse | PlainMessage<CreateInstanceResponse> | undefined, b: CreateInstanceResponse | PlainMessage<CreateInstanceResponse> | undefined): boolean {
    return proto3.util.equals(CreateInstanceResponse, a, b);
  }
}

/**
 * @generated from message bag.CreateAppRequest
 */
export class CreateAppRequest extends Message<CreateAppRequest> {
  /**
   * @generated from field: int32 appId = 1;
   */
  appId = 0;

  /**
   * @generated from field: string key = 2;
   */
  key = "";

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: optional string description = 4;
   */
  description?: string;

  /**
   * @generated from field: optional int32 permissions = 5;
   */
  permissions?: number;

  /**
   * @generated from field: optional bool public = 6;
   */
  public?: boolean;

  /**
   * @generated from field: optional string metadata = 7;
   */
  metadata?: string;

  constructor(data?: PartialMessage<CreateAppRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bag.CreateAppRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "appId", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "permissions", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 6, name: "public", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 7, name: "metadata", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateAppRequest {
    return new CreateAppRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateAppRequest {
    return new CreateAppRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateAppRequest {
    return new CreateAppRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateAppRequest | PlainMessage<CreateAppRequest> | undefined, b: CreateAppRequest | PlainMessage<CreateAppRequest> | undefined): boolean {
    return proto3.util.equals(CreateAppRequest, a, b);
  }
}

/**
 * @generated from message bag.CreateAppResponse
 */
export class CreateAppResponse extends Message<CreateAppResponse> {
  /**
   * @generated from field: optional string response = 1;
   */
  response?: string;

  /**
   * @generated from field: optional bag.App app = 2;
   */
  app?: App;

  /**
   * @generated from field: optional string key = 3;
   */
  key?: string;

  constructor(data?: PartialMessage<CreateAppResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bag.CreateAppResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "app", kind: "message", T: App, opt: true },
    { no: 3, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateAppResponse {
    return new CreateAppResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateAppResponse {
    return new CreateAppResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateAppResponse {
    return new CreateAppResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateAppResponse | PlainMessage<CreateAppResponse> | undefined, b: CreateAppResponse | PlainMessage<CreateAppResponse> | undefined): boolean {
    return proto3.util.equals(CreateAppResponse, a, b);
  }
}

/**
 * @generated from message bag.CreateItemRequest
 */
export class CreateItemRequest extends Message<CreateItemRequest> {
  /**
   * @generated from field: int32 appId = 1;
   */
  appId = 0;

  /**
   * @generated from field: string key = 2;
   */
  key = "";

  /**
   * @generated from field: bag.Item item = 3;
   */
  item?: Item;

  constructor(data?: PartialMessage<CreateItemRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bag.CreateItemRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "appId", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "item", kind: "message", T: Item },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateItemRequest {
    return new CreateItemRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateItemRequest {
    return new CreateItemRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateItemRequest {
    return new CreateItemRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateItemRequest | PlainMessage<CreateItemRequest> | undefined, b: CreateItemRequest | PlainMessage<CreateItemRequest> | undefined): boolean {
    return proto3.util.equals(CreateItemRequest, a, b);
  }
}

/**
 * @generated from message bag.CreateItemResponse
 */
export class CreateItemResponse extends Message<CreateItemResponse> {
  /**
   * @generated from field: optional string response = 1;
   */
  response?: string;

  /**
   * @generated from field: optional bag.Item item = 2;
   */
  item?: Item;

  constructor(data?: PartialMessage<CreateItemResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bag.CreateItemResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "item", kind: "message", T: Item, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateItemResponse {
    return new CreateItemResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateItemResponse {
    return new CreateItemResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateItemResponse {
    return new CreateItemResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateItemResponse | PlainMessage<CreateItemResponse> | undefined, b: CreateItemResponse | PlainMessage<CreateItemResponse> | undefined): boolean {
    return proto3.util.equals(CreateItemResponse, a, b);
  }
}

/**
 * @generated from message bag.CreateRecipeRequest
 */
export class CreateRecipeRequest extends Message<CreateRecipeRequest> {
  /**
   * @generated from field: int32 appId = 1;
   */
  appId = 0;

  /**
   * @generated from field: string key = 2;
   */
  key = "";

  /**
   * @generated from field: bag.Recipe recipe = 3;
   */
  recipe?: Recipe;

  constructor(data?: PartialMessage<CreateRecipeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bag.CreateRecipeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "appId", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "recipe", kind: "message", T: Recipe },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateRecipeRequest {
    return new CreateRecipeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateRecipeRequest {
    return new CreateRecipeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateRecipeRequest {
    return new CreateRecipeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateRecipeRequest | PlainMessage<CreateRecipeRequest> | undefined, b: CreateRecipeRequest | PlainMessage<CreateRecipeRequest> | undefined): boolean {
    return proto3.util.equals(CreateRecipeRequest, a, b);
  }
}

/**
 * @generated from message bag.CreateRecipeResponse
 */
export class CreateRecipeResponse extends Message<CreateRecipeResponse> {
  /**
   * @generated from field: optional string response = 1;
   */
  response?: string;

  /**
   * @generated from field: optional bag.Recipe recipe = 2;
   */
  recipe?: Recipe;

  constructor(data?: PartialMessage<CreateRecipeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bag.CreateRecipeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "recipe", kind: "message", T: Recipe, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateRecipeResponse {
    return new CreateRecipeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateRecipeResponse {
    return new CreateRecipeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateRecipeResponse {
    return new CreateRecipeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateRecipeResponse | PlainMessage<CreateRecipeResponse> | undefined, b: CreateRecipeResponse | PlainMessage<CreateRecipeResponse> | undefined): boolean {
    return proto3.util.equals(CreateRecipeResponse, a, b);
  }
}

/**
 * @generated from message bag.CreateTradeRequest
 */
export class CreateTradeRequest extends Message<CreateTradeRequest> {
  /**
   * @generated from field: int32 appId = 1;
   */
  appId = 0;

  /**
   * @generated from field: string key = 2;
   */
  key = "";

  /**
   * @generated from field: string initiator = 3;
   */
  initiator = "";

  /**
   * @generated from field: string receiver = 4;
   */
  receiver = "";

  /**
   * @generated from field: optional string callbackUrl = 5;
   */
  callbackUrl?: string;

  /**
   * @generated from field: optional string callbackMetadata = 6;
   */
  callbackMetadata?: string;

  /**
   * @generated from field: optional bool public = 7;
   */
  public?: boolean;

  constructor(data?: PartialMessage<CreateTradeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bag.CreateTradeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "appId", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "initiator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "receiver", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "callbackUrl", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 6, name: "callbackMetadata", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 7, name: "public", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateTradeRequest {
    return new CreateTradeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateTradeRequest {
    return new CreateTradeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateTradeRequest {
    return new CreateTradeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateTradeRequest | PlainMessage<CreateTradeRequest> | undefined, b: CreateTradeRequest | PlainMessage<CreateTradeRequest> | undefined): boolean {
    return proto3.util.equals(CreateTradeRequest, a, b);
  }
}

/**
 * @generated from message bag.CreateTradeResponse
 */
export class CreateTradeResponse extends Message<CreateTradeResponse> {
  /**
   * @generated from field: optional string response = 1;
   */
  response?: string;

  /**
   * @generated from field: optional bool initiated = 2;
   */
  initiated?: boolean;

  constructor(data?: PartialMessage<CreateTradeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bag.CreateTradeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "initiated", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateTradeResponse {
    return new CreateTradeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateTradeResponse {
    return new CreateTradeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateTradeResponse {
    return new CreateTradeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateTradeResponse | PlainMessage<CreateTradeResponse> | undefined, b: CreateTradeResponse | PlainMessage<CreateTradeResponse> | undefined): boolean {
    return proto3.util.equals(CreateTradeResponse, a, b);
  }
}

/**
 * @generated from message bag.CreateActionRequest
 */
export class CreateActionRequest extends Message<CreateActionRequest> {
  /**
   * @generated from field: int32 appId = 1;
   */
  appId = 0;

  /**
   * @generated from field: string key = 2;
   */
  key = "";

  /**
   * @generated from field: bag.Action action = 3;
   */
  action?: Action;

  constructor(data?: PartialMessage<CreateActionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bag.CreateActionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "appId", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "action", kind: "message", T: Action },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateActionRequest {
    return new CreateActionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateActionRequest {
    return new CreateActionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateActionRequest {
    return new CreateActionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateActionRequest | PlainMessage<CreateActionRequest> | undefined, b: CreateActionRequest | PlainMessage<CreateActionRequest> | undefined): boolean {
    return proto3.util.equals(CreateActionRequest, a, b);
  }
}

/**
 * @generated from message bag.CreateActionResponse
 */
export class CreateActionResponse extends Message<CreateActionResponse> {
  /**
   * @generated from field: optional string response = 1;
   */
  response?: string;

  /**
   * @generated from field: optional bag.Action action = 2;
   */
  action?: Action;

  constructor(data?: PartialMessage<CreateActionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bag.CreateActionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "action", kind: "message", T: Action, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateActionResponse {
    return new CreateActionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateActionResponse {
    return new CreateActionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateActionResponse {
    return new CreateActionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateActionResponse | PlainMessage<CreateActionResponse> | undefined, b: CreateActionResponse | PlainMessage<CreateActionResponse> | undefined): boolean {
    return proto3.util.equals(CreateActionResponse, a, b);
  }
}

/**
 * @generated from message bag.GetIdentitiesRequest
 */
export class GetIdentitiesRequest extends Message<GetIdentitiesRequest> {
  /**
   * @generated from field: int32 appId = 1;
   */
  appId = 0;

  /**
   * @generated from field: string key = 2;
   */
  key = "";

  /**
   * @generated from field: string query = 3;
   */
  query = "";

  constructor(data?: PartialMessage<GetIdentitiesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bag.GetIdentitiesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "appId", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "query", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetIdentitiesRequest {
    return new GetIdentitiesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetIdentitiesRequest {
    return new GetIdentitiesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetIdentitiesRequest {
    return new GetIdentitiesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetIdentitiesRequest | PlainMessage<GetIdentitiesRequest> | undefined, b: GetIdentitiesRequest | PlainMessage<GetIdentitiesRequest> | undefined): boolean {
    return proto3.util.equals(GetIdentitiesRequest, a, b);
  }
}

/**
 * @generated from message bag.GetIdentitiesResponse
 */
export class GetIdentitiesResponse extends Message<GetIdentitiesResponse> {
  /**
   * @generated from field: optional string response = 1;
   */
  response?: string;

  /**
   * @generated from field: repeated bag.Identity identities = 3;
   */
  identities: Identity[] = [];

  constructor(data?: PartialMessage<GetIdentitiesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bag.GetIdentitiesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "identities", kind: "message", T: Identity, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetIdentitiesResponse {
    return new GetIdentitiesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetIdentitiesResponse {
    return new GetIdentitiesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetIdentitiesResponse {
    return new GetIdentitiesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetIdentitiesResponse | PlainMessage<GetIdentitiesResponse> | undefined, b: GetIdentitiesResponse | PlainMessage<GetIdentitiesResponse> | undefined): boolean {
    return proto3.util.equals(GetIdentitiesResponse, a, b);
  }
}

/**
 * @generated from message bag.GetIdentityRequest
 */
export class GetIdentityRequest extends Message<GetIdentityRequest> {
  /**
   * @generated from field: int32 appId = 1;
   */
  appId = 0;

  /**
   * @generated from field: string key = 2;
   */
  key = "";

  /**
   * @generated from field: string identityId = 3;
   */
  identityId = "";

  constructor(data?: PartialMessage<GetIdentityRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bag.GetIdentityRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "appId", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "identityId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetIdentityRequest {
    return new GetIdentityRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetIdentityRequest {
    return new GetIdentityRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetIdentityRequest {
    return new GetIdentityRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetIdentityRequest | PlainMessage<GetIdentityRequest> | undefined, b: GetIdentityRequest | PlainMessage<GetIdentityRequest> | undefined): boolean {
    return proto3.util.equals(GetIdentityRequest, a, b);
  }
}

/**
 * @generated from message bag.GetIdentityResponse
 */
export class GetIdentityResponse extends Message<GetIdentityResponse> {
  /**
   * @generated from field: optional string response = 1;
   */
  response?: string;

  /**
   * @generated from field: optional bag.Identity identity = 2;
   */
  identity?: Identity;

  constructor(data?: PartialMessage<GetIdentityResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bag.GetIdentityResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "identity", kind: "message", T: Identity, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetIdentityResponse {
    return new GetIdentityResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetIdentityResponse {
    return new GetIdentityResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetIdentityResponse {
    return new GetIdentityResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetIdentityResponse | PlainMessage<GetIdentityResponse> | undefined, b: GetIdentityResponse | PlainMessage<GetIdentityResponse> | undefined): boolean {
    return proto3.util.equals(GetIdentityResponse, a, b);
  }
}

/**
 * @generated from message bag.GetInventoryRequest
 */
export class GetInventoryRequest extends Message<GetInventoryRequest> {
  /**
   * @generated from field: int32 appId = 1;
   */
  appId = 0;

  /**
   * @generated from field: string key = 2;
   */
  key = "";

  /**
   * @generated from field: string identityId = 3;
   */
  identityId = "";

  /**
   * @generated from field: bool available = 4;
   */
  available = false;

  constructor(data?: PartialMessage<GetInventoryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bag.GetInventoryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "appId", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "identityId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "available", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetInventoryRequest {
    return new GetInventoryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetInventoryRequest {
    return new GetInventoryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetInventoryRequest {
    return new GetInventoryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetInventoryRequest | PlainMessage<GetInventoryRequest> | undefined, b: GetInventoryRequest | PlainMessage<GetInventoryRequest> | undefined): boolean {
    return proto3.util.equals(GetInventoryRequest, a, b);
  }
}

/**
 * @generated from message bag.GetInventoryResponse
 */
export class GetInventoryResponse extends Message<GetInventoryResponse> {
  /**
   * @generated from field: optional string response = 1;
   */
  response?: string;

  /**
   * @generated from field: repeated bag.Instance inventory = 2;
   */
  inventory: Instance[] = [];

  constructor(data?: PartialMessage<GetInventoryResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bag.GetInventoryResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "inventory", kind: "message", T: Instance, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetInventoryResponse {
    return new GetInventoryResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetInventoryResponse {
    return new GetInventoryResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetInventoryResponse {
    return new GetInventoryResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetInventoryResponse | PlainMessage<GetInventoryResponse> | undefined, b: GetInventoryResponse | PlainMessage<GetInventoryResponse> | undefined): boolean {
    return proto3.util.equals(GetInventoryResponse, a, b);
  }
}

/**
 * @generated from message bag.GetItemRequest
 */
export class GetItemRequest extends Message<GetItemRequest> {
  /**
   * @generated from field: int32 appId = 1;
   */
  appId = 0;

  /**
   * @generated from field: string key = 2;
   */
  key = "";

  /**
   * @generated from field: string query = 3;
   */
  query = "";

  constructor(data?: PartialMessage<GetItemRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bag.GetItemRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "appId", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "query", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetItemRequest {
    return new GetItemRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetItemRequest {
    return new GetItemRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetItemRequest {
    return new GetItemRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetItemRequest | PlainMessage<GetItemRequest> | undefined, b: GetItemRequest | PlainMessage<GetItemRequest> | undefined): boolean {
    return proto3.util.equals(GetItemRequest, a, b);
  }
}

/**
 * @generated from message bag.GetItemResponse
 */
export class GetItemResponse extends Message<GetItemResponse> {
  /**
   * @generated from field: optional string response = 1;
   */
  response?: string;

  /**
   * @generated from field: bag.Item item = 2;
   */
  item?: Item;

  constructor(data?: PartialMessage<GetItemResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bag.GetItemResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "item", kind: "message", T: Item },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetItemResponse {
    return new GetItemResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetItemResponse {
    return new GetItemResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetItemResponse {
    return new GetItemResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetItemResponse | PlainMessage<GetItemResponse> | undefined, b: GetItemResponse | PlainMessage<GetItemResponse> | undefined): boolean {
    return proto3.util.equals(GetItemResponse, a, b);
  }
}

/**
 * @generated from message bag.GetItemsRequest
 */
export class GetItemsRequest extends Message<GetItemsRequest> {
  /**
   * @generated from field: int32 appId = 1;
   */
  appId = 0;

  /**
   * @generated from field: string key = 2;
   */
  key = "";

  /**
   * @generated from field: string query = 3;
   */
  query = "";

  constructor(data?: PartialMessage<GetItemsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bag.GetItemsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "appId", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "query", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetItemsRequest {
    return new GetItemsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetItemsRequest {
    return new GetItemsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetItemsRequest {
    return new GetItemsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetItemsRequest | PlainMessage<GetItemsRequest> | undefined, b: GetItemsRequest | PlainMessage<GetItemsRequest> | undefined): boolean {
    return proto3.util.equals(GetItemsRequest, a, b);
  }
}

/**
 * @generated from message bag.GetItemsResponse
 */
export class GetItemsResponse extends Message<GetItemsResponse> {
  /**
   * @generated from field: optional string response = 1;
   */
  response?: string;

  /**
   * @generated from field: repeated bag.Item items = 2;
   */
  items: Item[] = [];

  constructor(data?: PartialMessage<GetItemsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bag.GetItemsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "items", kind: "message", T: Item, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetItemsResponse {
    return new GetItemsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetItemsResponse {
    return new GetItemsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetItemsResponse {
    return new GetItemsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetItemsResponse | PlainMessage<GetItemsResponse> | undefined, b: GetItemsResponse | PlainMessage<GetItemsResponse> | undefined): boolean {
    return proto3.util.equals(GetItemsResponse, a, b);
  }
}

/**
 * @generated from message bag.GetInstanceRequest
 */
export class GetInstanceRequest extends Message<GetInstanceRequest> {
  /**
   * @generated from field: int32 appId = 1;
   */
  appId = 0;

  /**
   * @generated from field: string key = 2;
   */
  key = "";

  /**
   * @generated from field: int32 instanceId = 3;
   */
  instanceId = 0;

  constructor(data?: PartialMessage<GetInstanceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bag.GetInstanceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "appId", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "instanceId", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetInstanceRequest {
    return new GetInstanceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetInstanceRequest {
    return new GetInstanceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetInstanceRequest {
    return new GetInstanceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetInstanceRequest | PlainMessage<GetInstanceRequest> | undefined, b: GetInstanceRequest | PlainMessage<GetInstanceRequest> | undefined): boolean {
    return proto3.util.equals(GetInstanceRequest, a, b);
  }
}

/**
 * @generated from message bag.GetInstanceResponse
 */
export class GetInstanceResponse extends Message<GetInstanceResponse> {
  /**
   * @generated from field: optional string response = 1;
   */
  response?: string;

  /**
   * @generated from field: optional bag.Instance instance = 2;
   */
  instance?: Instance;

  constructor(data?: PartialMessage<GetInstanceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bag.GetInstanceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "instance", kind: "message", T: Instance, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetInstanceResponse {
    return new GetInstanceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetInstanceResponse {
    return new GetInstanceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetInstanceResponse {
    return new GetInstanceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetInstanceResponse | PlainMessage<GetInstanceResponse> | undefined, b: GetInstanceResponse | PlainMessage<GetInstanceResponse> | undefined): boolean {
    return proto3.util.equals(GetInstanceResponse, a, b);
  }
}

/**
 * @generated from message bag.GetAppRequest
 */
export class GetAppRequest extends Message<GetAppRequest> {
  /**
   * @generated from field: int32 appId = 1;
   */
  appId = 0;

  /**
   * @generated from field: string key = 2;
   */
  key = "";

  /**
   * @generated from field: int32 optAppId = 3;
   */
  optAppId = 0;

  constructor(data?: PartialMessage<GetAppRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bag.GetAppRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "appId", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "optAppId", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAppRequest {
    return new GetAppRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAppRequest {
    return new GetAppRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAppRequest {
    return new GetAppRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetAppRequest | PlainMessage<GetAppRequest> | undefined, b: GetAppRequest | PlainMessage<GetAppRequest> | undefined): boolean {
    return proto3.util.equals(GetAppRequest, a, b);
  }
}

/**
 * @generated from message bag.GetAppResponse
 */
export class GetAppResponse extends Message<GetAppResponse> {
  /**
   * @generated from field: optional string response = 1;
   */
  response?: string;

  /**
   * @generated from field: optional bag.App app = 2;
   */
  app?: App;

  constructor(data?: PartialMessage<GetAppResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bag.GetAppResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "app", kind: "message", T: App, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAppResponse {
    return new GetAppResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAppResponse {
    return new GetAppResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAppResponse {
    return new GetAppResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetAppResponse | PlainMessage<GetAppResponse> | undefined, b: GetAppResponse | PlainMessage<GetAppResponse> | undefined): boolean {
    return proto3.util.equals(GetAppResponse, a, b);
  }
}

/**
 * @generated from message bag.GetTradeRequest
 */
export class GetTradeRequest extends Message<GetTradeRequest> {
  /**
   * @generated from field: int32 appId = 1;
   */
  appId = 0;

  /**
   * @generated from field: string key = 2;
   */
  key = "";

  /**
   * @generated from field: bag.Trade query = 3;
   */
  query?: Trade;

  constructor(data?: PartialMessage<GetTradeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bag.GetTradeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "appId", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "query", kind: "message", T: Trade },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTradeRequest {
    return new GetTradeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTradeRequest {
    return new GetTradeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTradeRequest {
    return new GetTradeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetTradeRequest | PlainMessage<GetTradeRequest> | undefined, b: GetTradeRequest | PlainMessage<GetTradeRequest> | undefined): boolean {
    return proto3.util.equals(GetTradeRequest, a, b);
  }
}

/**
 * @generated from message bag.GetTradeResponse
 */
export class GetTradeResponse extends Message<GetTradeResponse> {
  /**
   * @generated from field: optional string response = 1;
   */
  response?: string;

  /**
   * @generated from field: optional bag.Trade trade = 2;
   */
  trade?: Trade;

  constructor(data?: PartialMessage<GetTradeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bag.GetTradeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "trade", kind: "message", T: Trade, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTradeResponse {
    return new GetTradeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTradeResponse {
    return new GetTradeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTradeResponse {
    return new GetTradeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetTradeResponse | PlainMessage<GetTradeResponse> | undefined, b: GetTradeResponse | PlainMessage<GetTradeResponse> | undefined): boolean {
    return proto3.util.equals(GetTradeResponse, a, b);
  }
}

/**
 * @generated from message bag.GetTradesRequest
 */
export class GetTradesRequest extends Message<GetTradesRequest> {
  /**
   * @generated from field: int32 appId = 1;
   */
  appId = 0;

  /**
   * @generated from field: string key = 2;
   */
  key = "";

  /**
   * @generated from field: bag.Trade query = 3;
   */
  query?: Trade;

  constructor(data?: PartialMessage<GetTradesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bag.GetTradesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "appId", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "query", kind: "message", T: Trade },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTradesRequest {
    return new GetTradesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTradesRequest {
    return new GetTradesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTradesRequest {
    return new GetTradesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetTradesRequest | PlainMessage<GetTradesRequest> | undefined, b: GetTradesRequest | PlainMessage<GetTradesRequest> | undefined): boolean {
    return proto3.util.equals(GetTradesRequest, a, b);
  }
}

/**
 * @generated from message bag.GetTradesResponse
 */
export class GetTradesResponse extends Message<GetTradesResponse> {
  /**
   * @generated from field: optional string response = 1;
   */
  response?: string;

  /**
   * @generated from field: repeated bag.Trade trades = 2;
   */
  trades: Trade[] = [];

  constructor(data?: PartialMessage<GetTradesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bag.GetTradesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "trades", kind: "message", T: Trade, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTradesResponse {
    return new GetTradesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTradesResponse {
    return new GetTradesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTradesResponse {
    return new GetTradesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetTradesResponse | PlainMessage<GetTradesResponse> | undefined, b: GetTradesResponse | PlainMessage<GetTradesResponse> | undefined): boolean {
    return proto3.util.equals(GetTradesResponse, a, b);
  }
}

/**
 * @generated from message bag.GetRecipesRequest
 */
export class GetRecipesRequest extends Message<GetRecipesRequest> {
  /**
   * @generated from field: int32 appId = 1;
   */
  appId = 0;

  /**
   * @generated from field: string key = 2;
   */
  key = "";

  /**
   * @generated from field: bag.Recipe query = 3;
   */
  query?: Recipe;

  /**
   * Return recipes that include at least one input/output/tool/skill in query
   *
   * @generated from field: optional bool inclusive = 4;
   */
  inclusive?: boolean;

  constructor(data?: PartialMessage<GetRecipesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bag.GetRecipesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "appId", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "query", kind: "message", T: Recipe },
    { no: 4, name: "inclusive", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRecipesRequest {
    return new GetRecipesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRecipesRequest {
    return new GetRecipesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRecipesRequest {
    return new GetRecipesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetRecipesRequest | PlainMessage<GetRecipesRequest> | undefined, b: GetRecipesRequest | PlainMessage<GetRecipesRequest> | undefined): boolean {
    return proto3.util.equals(GetRecipesRequest, a, b);
  }
}

/**
 * @generated from message bag.GetRecipesResponse
 */
export class GetRecipesResponse extends Message<GetRecipesResponse> {
  /**
   * @generated from field: optional string response = 1;
   */
  response?: string;

  /**
   * @generated from field: repeated bag.Recipe recipes = 2;
   */
  recipes: Recipe[] = [];

  constructor(data?: PartialMessage<GetRecipesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bag.GetRecipesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "recipes", kind: "message", T: Recipe, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRecipesResponse {
    return new GetRecipesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRecipesResponse {
    return new GetRecipesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRecipesResponse {
    return new GetRecipesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetRecipesResponse | PlainMessage<GetRecipesResponse> | undefined, b: GetRecipesResponse | PlainMessage<GetRecipesResponse> | undefined): boolean {
    return proto3.util.equals(GetRecipesResponse, a, b);
  }
}

/**
 * @generated from message bag.GetRecipeRequest
 */
export class GetRecipeRequest extends Message<GetRecipeRequest> {
  /**
   * @generated from field: int32 appId = 1;
   */
  appId = 0;

  /**
   * @generated from field: string key = 2;
   */
  key = "";

  /**
   * @generated from field: bag.Recipe query = 3;
   */
  query?: Recipe;

  constructor(data?: PartialMessage<GetRecipeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bag.GetRecipeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "appId", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "query", kind: "message", T: Recipe },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRecipeRequest {
    return new GetRecipeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRecipeRequest {
    return new GetRecipeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRecipeRequest {
    return new GetRecipeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetRecipeRequest | PlainMessage<GetRecipeRequest> | undefined, b: GetRecipeRequest | PlainMessage<GetRecipeRequest> | undefined): boolean {
    return proto3.util.equals(GetRecipeRequest, a, b);
  }
}

/**
 * @generated from message bag.GetRecipeResponse
 */
export class GetRecipeResponse extends Message<GetRecipeResponse> {
  /**
   * @generated from field: optional string response = 1;
   */
  response?: string;

  /**
   * @generated from field: bag.Recipe recipe = 2;
   */
  recipe?: Recipe;

  constructor(data?: PartialMessage<GetRecipeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bag.GetRecipeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "recipe", kind: "message", T: Recipe },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRecipeResponse {
    return new GetRecipeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRecipeResponse {
    return new GetRecipeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRecipeResponse {
    return new GetRecipeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetRecipeResponse | PlainMessage<GetRecipeResponse> | undefined, b: GetRecipeResponse | PlainMessage<GetRecipeResponse> | undefined): boolean {
    return proto3.util.equals(GetRecipeResponse, a, b);
  }
}

/**
 * @generated from message bag.GetActionRequest
 */
export class GetActionRequest extends Message<GetActionRequest> {
  /**
   * @generated from field: int32 appId = 1;
   */
  appId = 0;

  /**
   * @generated from field: string key = 2;
   */
  key = "";

  /**
   * @generated from field: bag.Action query = 3;
   */
  query?: Action;

  constructor(data?: PartialMessage<GetActionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bag.GetActionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "appId", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "query", kind: "message", T: Action },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetActionRequest {
    return new GetActionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetActionRequest {
    return new GetActionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetActionRequest {
    return new GetActionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetActionRequest | PlainMessage<GetActionRequest> | undefined, b: GetActionRequest | PlainMessage<GetActionRequest> | undefined): boolean {
    return proto3.util.equals(GetActionRequest, a, b);
  }
}

/**
 * @generated from message bag.GetActionResponse
 */
export class GetActionResponse extends Message<GetActionResponse> {
  /**
   * @generated from field: optional string response = 1;
   */
  response?: string;

  /**
   * @generated from field: repeated bag.Action actions = 2;
   */
  actions: Action[] = [];

  constructor(data?: PartialMessage<GetActionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bag.GetActionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "actions", kind: "message", T: Action, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetActionResponse {
    return new GetActionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetActionResponse {
    return new GetActionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetActionResponse {
    return new GetActionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetActionResponse | PlainMessage<GetActionResponse> | undefined, b: GetActionResponse | PlainMessage<GetActionResponse> | undefined): boolean {
    return proto3.util.equals(GetActionResponse, a, b);
  }
}

/**
 * @generated from message bag.UpdateIdentityMetadataRequest
 */
export class UpdateIdentityMetadataRequest extends Message<UpdateIdentityMetadataRequest> {
  /**
   * @generated from field: int32 appId = 1;
   */
  appId = 0;

  /**
   * @generated from field: string key = 2;
   */
  key = "";

  /**
   * @generated from field: string identityId = 3;
   */
  identityId = "";

  /**
   * @generated from field: string metadata = 4;
   */
  metadata = "";

  constructor(data?: PartialMessage<UpdateIdentityMetadataRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bag.UpdateIdentityMetadataRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "appId", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "identityId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "metadata", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateIdentityMetadataRequest {
    return new UpdateIdentityMetadataRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateIdentityMetadataRequest {
    return new UpdateIdentityMetadataRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateIdentityMetadataRequest {
    return new UpdateIdentityMetadataRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateIdentityMetadataRequest | PlainMessage<UpdateIdentityMetadataRequest> | undefined, b: UpdateIdentityMetadataRequest | PlainMessage<UpdateIdentityMetadataRequest> | undefined): boolean {
    return proto3.util.equals(UpdateIdentityMetadataRequest, a, b);
  }
}

/**
 * @generated from message bag.UpdateIdentityMetadataResponse
 */
export class UpdateIdentityMetadataResponse extends Message<UpdateIdentityMetadataResponse> {
  /**
   * @generated from field: optional string response = 1;
   */
  response?: string;

  /**
   * @generated from field: optional bag.Identity identity = 2;
   */
  identity?: Identity;

  constructor(data?: PartialMessage<UpdateIdentityMetadataResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bag.UpdateIdentityMetadataResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "identity", kind: "message", T: Identity, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateIdentityMetadataResponse {
    return new UpdateIdentityMetadataResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateIdentityMetadataResponse {
    return new UpdateIdentityMetadataResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateIdentityMetadataResponse {
    return new UpdateIdentityMetadataResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateIdentityMetadataResponse | PlainMessage<UpdateIdentityMetadataResponse> | undefined, b: UpdateIdentityMetadataResponse | PlainMessage<UpdateIdentityMetadataResponse> | undefined): boolean {
    return proto3.util.equals(UpdateIdentityMetadataResponse, a, b);
  }
}

/**
 * @generated from message bag.UpdateInstanceRequest
 */
export class UpdateInstanceRequest extends Message<UpdateInstanceRequest> {
  /**
   * @generated from field: int32 appId = 1;
   */
  appId = 0;

  /**
   * @generated from field: string key = 2;
   */
  key = "";

  /**
   * @generated from field: int32 instanceId = 3;
   */
  instanceId = 0;

  /**
   * @generated from field: bag.Instance new = 4;
   */
  new?: Instance;

  /**
   * @generated from field: optional bool show = 5;
   */
  show?: boolean;

  /**
   * @generated from field: optional string note = 6;
   */
  note?: string;

  constructor(data?: PartialMessage<UpdateInstanceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bag.UpdateInstanceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "appId", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "instanceId", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "new", kind: "message", T: Instance },
    { no: 5, name: "show", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 6, name: "note", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateInstanceRequest {
    return new UpdateInstanceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateInstanceRequest {
    return new UpdateInstanceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateInstanceRequest {
    return new UpdateInstanceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateInstanceRequest | PlainMessage<UpdateInstanceRequest> | undefined, b: UpdateInstanceRequest | PlainMessage<UpdateInstanceRequest> | undefined): boolean {
    return proto3.util.equals(UpdateInstanceRequest, a, b);
  }
}

/**
 * @generated from message bag.UpdateInstanceResponse
 */
export class UpdateInstanceResponse extends Message<UpdateInstanceResponse> {
  /**
   * @generated from field: optional string response = 1;
   */
  response?: string;

  /**
   * @generated from field: optional bag.Instance instance = 2;
   */
  instance?: Instance;

  constructor(data?: PartialMessage<UpdateInstanceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bag.UpdateInstanceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "instance", kind: "message", T: Instance, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateInstanceResponse {
    return new UpdateInstanceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateInstanceResponse {
    return new UpdateInstanceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateInstanceResponse {
    return new UpdateInstanceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateInstanceResponse | PlainMessage<UpdateInstanceResponse> | undefined, b: UpdateInstanceResponse | PlainMessage<UpdateInstanceResponse> | undefined): boolean {
    return proto3.util.equals(UpdateInstanceResponse, a, b);
  }
}

/**
 * @generated from message bag.UpdateItemRequest
 */
export class UpdateItemRequest extends Message<UpdateItemRequest> {
  /**
   * @generated from field: int32 appId = 1;
   */
  appId = 0;

  /**
   * @generated from field: string key = 2;
   */
  key = "";

  /**
   * @generated from field: string itemId = 3;
   */
  itemId = "";

  /**
   * @generated from field: bag.Item new = 4;
   */
  new?: Item;

  constructor(data?: PartialMessage<UpdateItemRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bag.UpdateItemRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "appId", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "itemId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "new", kind: "message", T: Item },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateItemRequest {
    return new UpdateItemRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateItemRequest {
    return new UpdateItemRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateItemRequest {
    return new UpdateItemRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateItemRequest | PlainMessage<UpdateItemRequest> | undefined, b: UpdateItemRequest | PlainMessage<UpdateItemRequest> | undefined): boolean {
    return proto3.util.equals(UpdateItemRequest, a, b);
  }
}

/**
 * @generated from message bag.UpdateItemResponse
 */
export class UpdateItemResponse extends Message<UpdateItemResponse> {
  /**
   * @generated from field: optional string response = 1;
   */
  response?: string;

  /**
   * @generated from field: optional bag.Item item = 2;
   */
  item?: Item;

  constructor(data?: PartialMessage<UpdateItemResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bag.UpdateItemResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "item", kind: "message", T: Item, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateItemResponse {
    return new UpdateItemResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateItemResponse {
    return new UpdateItemResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateItemResponse {
    return new UpdateItemResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateItemResponse | PlainMessage<UpdateItemResponse> | undefined, b: UpdateItemResponse | PlainMessage<UpdateItemResponse> | undefined): boolean {
    return proto3.util.equals(UpdateItemResponse, a, b);
  }
}

/**
 * @generated from message bag.UpdateAppRequest
 */
export class UpdateAppRequest extends Message<UpdateAppRequest> {
  /**
   * @generated from field: int32 appId = 1;
   */
  appId = 0;

  /**
   * @generated from field: string key = 2;
   */
  key = "";

  /**
   * @generated from field: optional int32 optAppId = 3;
   */
  optAppId?: number;

  /**
   * @generated from field: bag.App new = 4;
   */
  new?: App;

  constructor(data?: PartialMessage<UpdateAppRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bag.UpdateAppRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "appId", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "optAppId", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 4, name: "new", kind: "message", T: App },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateAppRequest {
    return new UpdateAppRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateAppRequest {
    return new UpdateAppRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateAppRequest {
    return new UpdateAppRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateAppRequest | PlainMessage<UpdateAppRequest> | undefined, b: UpdateAppRequest | PlainMessage<UpdateAppRequest> | undefined): boolean {
    return proto3.util.equals(UpdateAppRequest, a, b);
  }
}

/**
 * @generated from message bag.UpdateAppResponse
 */
export class UpdateAppResponse extends Message<UpdateAppResponse> {
  /**
   * @generated from field: optional string response = 1;
   */
  response?: string;

  /**
   * @generated from field: optional bag.App app = 2;
   */
  app?: App;

  constructor(data?: PartialMessage<UpdateAppResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bag.UpdateAppResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "app", kind: "message", T: App, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateAppResponse {
    return new UpdateAppResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateAppResponse {
    return new UpdateAppResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateAppResponse {
    return new UpdateAppResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateAppResponse | PlainMessage<UpdateAppResponse> | undefined, b: UpdateAppResponse | PlainMessage<UpdateAppResponse> | undefined): boolean {
    return proto3.util.equals(UpdateAppResponse, a, b);
  }
}

/**
 * @generated from message bag.UpdateTradeRequest
 */
export class UpdateTradeRequest extends Message<UpdateTradeRequest> {
  /**
   * @generated from field: int32 appId = 1;
   */
  appId = 0;

  /**
   * @generated from field: string key = 2;
   */
  key = "";

  /**
   * @generated from field: int32 tradeId = 3;
   */
  tradeId = 0;

  /**
   * @generated from field: string identityId = 4;
   */
  identityId = "";

  /**
   * @generated from field: repeated bag.Instance add = 5;
   */
  add: Instance[] = [];

  /**
   * @generated from field: repeated bag.Instance remove = 6;
   */
  remove: Instance[] = [];

  /**
   * @generated from field: optional string callbackUrl = 7;
   */
  callbackUrl?: string;

  /**
   * @generated from field: optional string callbackMetadata = 8;
   */
  callbackMetadata?: string;

  constructor(data?: PartialMessage<UpdateTradeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bag.UpdateTradeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "appId", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "tradeId", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "identityId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "add", kind: "message", T: Instance, repeated: true },
    { no: 6, name: "remove", kind: "message", T: Instance, repeated: true },
    { no: 7, name: "callbackUrl", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 8, name: "callbackMetadata", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateTradeRequest {
    return new UpdateTradeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateTradeRequest {
    return new UpdateTradeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateTradeRequest {
    return new UpdateTradeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateTradeRequest | PlainMessage<UpdateTradeRequest> | undefined, b: UpdateTradeRequest | PlainMessage<UpdateTradeRequest> | undefined): boolean {
    return proto3.util.equals(UpdateTradeRequest, a, b);
  }
}

/**
 * @generated from message bag.UpdateTradeResponse
 */
export class UpdateTradeResponse extends Message<UpdateTradeResponse> {
  /**
   * @generated from field: optional string response = 1;
   */
  response?: string;

  /**
   * @generated from field: optional bool initiated = 2;
   */
  initiated?: boolean;

  constructor(data?: PartialMessage<UpdateTradeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bag.UpdateTradeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "initiated", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateTradeResponse {
    return new UpdateTradeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateTradeResponse {
    return new UpdateTradeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateTradeResponse {
    return new UpdateTradeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateTradeResponse | PlainMessage<UpdateTradeResponse> | undefined, b: UpdateTradeResponse | PlainMessage<UpdateTradeResponse> | undefined): boolean {
    return proto3.util.equals(UpdateTradeResponse, a, b);
  }
}

/**
 * @generated from message bag.UpdateRecipeRequest
 */
export class UpdateRecipeRequest extends Message<UpdateRecipeRequest> {
  /**
   * @generated from field: int32 appId = 1;
   */
  appId = 0;

  /**
   * @generated from field: string key = 2;
   */
  key = "";

  /**
   * @generated from field: int32 recipeId = 3;
   */
  recipeId = 0;

  /**
   * @generated from field: bag.Recipe new = 4;
   */
  new?: Recipe;

  constructor(data?: PartialMessage<UpdateRecipeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bag.UpdateRecipeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "appId", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "recipeId", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "new", kind: "message", T: Recipe },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateRecipeRequest {
    return new UpdateRecipeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateRecipeRequest {
    return new UpdateRecipeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateRecipeRequest {
    return new UpdateRecipeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateRecipeRequest | PlainMessage<UpdateRecipeRequest> | undefined, b: UpdateRecipeRequest | PlainMessage<UpdateRecipeRequest> | undefined): boolean {
    return proto3.util.equals(UpdateRecipeRequest, a, b);
  }
}

/**
 * @generated from message bag.UpdateRecipeResponse
 */
export class UpdateRecipeResponse extends Message<UpdateRecipeResponse> {
  /**
   * @generated from field: optional string response = 1;
   */
  response?: string;

  /**
   * @generated from field: optional bag.Recipe recipe = 2;
   */
  recipe?: Recipe;

  constructor(data?: PartialMessage<UpdateRecipeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bag.UpdateRecipeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "recipe", kind: "message", T: Recipe, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateRecipeResponse {
    return new UpdateRecipeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateRecipeResponse {
    return new UpdateRecipeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateRecipeResponse {
    return new UpdateRecipeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateRecipeResponse | PlainMessage<UpdateRecipeResponse> | undefined, b: UpdateRecipeResponse | PlainMessage<UpdateRecipeResponse> | undefined): boolean {
    return proto3.util.equals(UpdateRecipeResponse, a, b);
  }
}

/**
 * @generated from message bag.UpdateActionRequest
 */
export class UpdateActionRequest extends Message<UpdateActionRequest> {
  /**
   * @generated from field: int32 appId = 1;
   */
  appId = 0;

  /**
   * @generated from field: string key = 2;
   */
  key = "";

  /**
   * @generated from field: int32 actionId = 3;
   */
  actionId = 0;

  /**
   * @generated from field: bag.Action new = 4;
   */
  new?: Action;

  constructor(data?: PartialMessage<UpdateActionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bag.UpdateActionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "appId", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "actionId", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "new", kind: "message", T: Action },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateActionRequest {
    return new UpdateActionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateActionRequest {
    return new UpdateActionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateActionRequest {
    return new UpdateActionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateActionRequest | PlainMessage<UpdateActionRequest> | undefined, b: UpdateActionRequest | PlainMessage<UpdateActionRequest> | undefined): boolean {
    return proto3.util.equals(UpdateActionRequest, a, b);
  }
}

/**
 * @generated from message bag.UpdateActionResponse
 */
export class UpdateActionResponse extends Message<UpdateActionResponse> {
  /**
   * @generated from field: optional string response = 1;
   */
  response?: string;

  /**
   * @generated from field: optional bag.Action action = 2;
   */
  action?: Action;

  constructor(data?: PartialMessage<UpdateActionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bag.UpdateActionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "action", kind: "message", T: Action, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateActionResponse {
    return new UpdateActionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateActionResponse {
    return new UpdateActionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateActionResponse {
    return new UpdateActionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateActionResponse | PlainMessage<UpdateActionResponse> | undefined, b: UpdateActionResponse | PlainMessage<UpdateActionResponse> | undefined): boolean {
    return proto3.util.equals(UpdateActionResponse, a, b);
  }
}

/**
 * @generated from message bag.DeleteAppRequest
 */
export class DeleteAppRequest extends Message<DeleteAppRequest> {
  /**
   * @generated from field: int32 appId = 1;
   */
  appId = 0;

  /**
   * @generated from field: string key = 2;
   */
  key = "";

  /**
   * @generated from field: int32 deleteAppId = 3;
   */
  deleteAppId = 0;

  constructor(data?: PartialMessage<DeleteAppRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bag.DeleteAppRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "appId", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "deleteAppId", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteAppRequest {
    return new DeleteAppRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteAppRequest {
    return new DeleteAppRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteAppRequest {
    return new DeleteAppRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteAppRequest | PlainMessage<DeleteAppRequest> | undefined, b: DeleteAppRequest | PlainMessage<DeleteAppRequest> | undefined): boolean {
    return proto3.util.equals(DeleteAppRequest, a, b);
  }
}

/**
 * @generated from message bag.DeleteAppResponse
 */
export class DeleteAppResponse extends Message<DeleteAppResponse> {
  /**
   * @generated from field: optional string response = 1;
   */
  response?: string;

  /**
   * @generated from field: optional bag.App deletedApp = 2;
   */
  deletedApp?: App;

  constructor(data?: PartialMessage<DeleteAppResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bag.DeleteAppResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "deletedApp", kind: "message", T: App, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteAppResponse {
    return new DeleteAppResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteAppResponse {
    return new DeleteAppResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteAppResponse {
    return new DeleteAppResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteAppResponse | PlainMessage<DeleteAppResponse> | undefined, b: DeleteAppResponse | PlainMessage<DeleteAppResponse> | undefined): boolean {
    return proto3.util.equals(DeleteAppResponse, a, b);
  }
}

/**
 * @generated from message bag.DeleteInstanceRequest
 */
export class DeleteInstanceRequest extends Message<DeleteInstanceRequest> {
  /**
   * @generated from field: int32 appId = 1;
   */
  appId = 0;

  /**
   * @generated from field: string key = 2;
   */
  key = "";

  /**
   * @generated from field: int32 instanceId = 3;
   */
  instanceId = 0;

  constructor(data?: PartialMessage<DeleteInstanceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bag.DeleteInstanceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "appId", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "instanceId", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteInstanceRequest {
    return new DeleteInstanceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteInstanceRequest {
    return new DeleteInstanceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteInstanceRequest {
    return new DeleteInstanceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteInstanceRequest | PlainMessage<DeleteInstanceRequest> | undefined, b: DeleteInstanceRequest | PlainMessage<DeleteInstanceRequest> | undefined): boolean {
    return proto3.util.equals(DeleteInstanceRequest, a, b);
  }
}

/**
 * @generated from message bag.DeleteInstanceResponse
 */
export class DeleteInstanceResponse extends Message<DeleteInstanceResponse> {
  /**
   * @generated from field: optional string response = 1;
   */
  response?: string;

  /**
   * @generated from field: optional bag.Instance deletedInstance = 2;
   */
  deletedInstance?: Instance;

  constructor(data?: PartialMessage<DeleteInstanceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bag.DeleteInstanceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "deletedInstance", kind: "message", T: Instance, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteInstanceResponse {
    return new DeleteInstanceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteInstanceResponse {
    return new DeleteInstanceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteInstanceResponse {
    return new DeleteInstanceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteInstanceResponse | PlainMessage<DeleteInstanceResponse> | undefined, b: DeleteInstanceResponse | PlainMessage<DeleteInstanceResponse> | undefined): boolean {
    return proto3.util.equals(DeleteInstanceResponse, a, b);
  }
}

/**
 * @generated from message bag.DeleteTradeRequest
 */
export class DeleteTradeRequest extends Message<DeleteTradeRequest> {
  /**
   * @generated from field: int32 appId = 1;
   */
  appId = 0;

  /**
   * @generated from field: string key = 2;
   */
  key = "";

  /**
   * @generated from field: int32 tradeId = 3;
   */
  tradeId = 0;

  constructor(data?: PartialMessage<DeleteTradeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bag.DeleteTradeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "appId", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "tradeId", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteTradeRequest {
    return new DeleteTradeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteTradeRequest {
    return new DeleteTradeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteTradeRequest {
    return new DeleteTradeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteTradeRequest | PlainMessage<DeleteTradeRequest> | undefined, b: DeleteTradeRequest | PlainMessage<DeleteTradeRequest> | undefined): boolean {
    return proto3.util.equals(DeleteTradeRequest, a, b);
  }
}

/**
 * @generated from message bag.DeleteTradeResponse
 */
export class DeleteTradeResponse extends Message<DeleteTradeResponse> {
  /**
   * @generated from field: optional string response = 1;
   */
  response?: string;

  /**
   * @generated from field: optional bag.Trade deletedTrade = 2;
   */
  deletedTrade?: Trade;

  constructor(data?: PartialMessage<DeleteTradeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bag.DeleteTradeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "deletedTrade", kind: "message", T: Trade, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteTradeResponse {
    return new DeleteTradeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteTradeResponse {
    return new DeleteTradeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteTradeResponse {
    return new DeleteTradeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteTradeResponse | PlainMessage<DeleteTradeResponse> | undefined, b: DeleteTradeResponse | PlainMessage<DeleteTradeResponse> | undefined): boolean {
    return proto3.util.equals(DeleteTradeResponse, a, b);
  }
}

/**
 * @generated from message bag.CloseTradeRequest
 */
export class CloseTradeRequest extends Message<CloseTradeRequest> {
  /**
   * @generated from field: int32 appId = 1;
   */
  appId = 0;

  /**
   * @generated from field: string key = 2;
   */
  key = "";

  /**
   * @generated from field: int32 tradeId = 3;
   */
  tradeId = 0;

  /**
   * @generated from field: optional bool cancel = 4;
   */
  cancel?: boolean;

  /**
   * @generated from field: optional string callbackUrl = 5;
   */
  callbackUrl?: string;

  /**
   * @generated from field: optional string callbackMetadata = 6;
   */
  callbackMetadata?: string;

  constructor(data?: PartialMessage<CloseTradeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bag.CloseTradeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "appId", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "tradeId", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "cancel", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 5, name: "callbackUrl", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 6, name: "callbackMetadata", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CloseTradeRequest {
    return new CloseTradeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CloseTradeRequest {
    return new CloseTradeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CloseTradeRequest {
    return new CloseTradeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CloseTradeRequest | PlainMessage<CloseTradeRequest> | undefined, b: CloseTradeRequest | PlainMessage<CloseTradeRequest> | undefined): boolean {
    return proto3.util.equals(CloseTradeRequest, a, b);
  }
}

/**
 * @generated from message bag.CloseTradeResponse
 */
export class CloseTradeResponse extends Message<CloseTradeResponse> {
  /**
   * @generated from field: optional string response = 1;
   */
  response?: string;

  /**
   * @generated from field: optional bool initiated = 2;
   */
  initiated?: boolean;

  constructor(data?: PartialMessage<CloseTradeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bag.CloseTradeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "initiated", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CloseTradeResponse {
    return new CloseTradeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CloseTradeResponse {
    return new CloseTradeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CloseTradeResponse {
    return new CloseTradeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CloseTradeResponse | PlainMessage<CloseTradeResponse> | undefined, b: CloseTradeResponse | PlainMessage<CloseTradeResponse> | undefined): boolean {
    return proto3.util.equals(CloseTradeResponse, a, b);
  }
}

/**
 * @generated from message bag.VerifyKeyRequest
 */
export class VerifyKeyRequest extends Message<VerifyKeyRequest> {
  /**
   * @generated from field: int32 appId = 1;
   */
  appId = 0;

  /**
   * @generated from field: string key = 2;
   */
  key = "";

  constructor(data?: PartialMessage<VerifyKeyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bag.VerifyKeyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "appId", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VerifyKeyRequest {
    return new VerifyKeyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VerifyKeyRequest {
    return new VerifyKeyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VerifyKeyRequest {
    return new VerifyKeyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: VerifyKeyRequest | PlainMessage<VerifyKeyRequest> | undefined, b: VerifyKeyRequest | PlainMessage<VerifyKeyRequest> | undefined): boolean {
    return proto3.util.equals(VerifyKeyRequest, a, b);
  }
}

/**
 * @generated from message bag.VerifyKeyResponse
 */
export class VerifyKeyResponse extends Message<VerifyKeyResponse> {
  /**
   * @generated from field: bool valid = 1;
   */
  valid = false;

  constructor(data?: PartialMessage<VerifyKeyResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bag.VerifyKeyResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "valid", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VerifyKeyResponse {
    return new VerifyKeyResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VerifyKeyResponse {
    return new VerifyKeyResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VerifyKeyResponse {
    return new VerifyKeyResponse().fromJsonString(jsonString, options);
  }

  static equals(a: VerifyKeyResponse | PlainMessage<VerifyKeyResponse> | undefined, b: VerifyKeyResponse | PlainMessage<VerifyKeyResponse> | undefined): boolean {
    return proto3.util.equals(VerifyKeyResponse, a, b);
  }
}

/**
 * @generated from message bag.RunGiveRequest
 */
export class RunGiveRequest extends Message<RunGiveRequest> {
  /**
   * @generated from field: int32 appId = 1;
   */
  appId = 0;

  /**
   * @generated from field: string key = 2;
   */
  key = "";

  /**
   * @generated from field: string giverId = 3;
   */
  giverId = "";

  /**
   * @generated from field: string receiverId = 4;
   */
  receiverId = "";

  /**
   * @generated from field: repeated bag.Instance instances = 5;
   */
  instances: Instance[] = [];

  constructor(data?: PartialMessage<RunGiveRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bag.RunGiveRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "appId", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "giverId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "receiverId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "instances", kind: "message", T: Instance, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RunGiveRequest {
    return new RunGiveRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RunGiveRequest {
    return new RunGiveRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RunGiveRequest {
    return new RunGiveRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RunGiveRequest | PlainMessage<RunGiveRequest> | undefined, b: RunGiveRequest | PlainMessage<RunGiveRequest> | undefined): boolean {
    return proto3.util.equals(RunGiveRequest, a, b);
  }
}

/**
 * @generated from message bag.RunGiveResponse
 */
export class RunGiveResponse extends Message<RunGiveResponse> {
  /**
   * @generated from field: optional string response = 1;
   */
  response?: string;

  /**
   * @generated from field: repeated bag.Instance instances = 2;
   */
  instances: Instance[] = [];

  constructor(data?: PartialMessage<RunGiveResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bag.RunGiveResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "instances", kind: "message", T: Instance, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RunGiveResponse {
    return new RunGiveResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RunGiveResponse {
    return new RunGiveResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RunGiveResponse {
    return new RunGiveResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RunGiveResponse | PlainMessage<RunGiveResponse> | undefined, b: RunGiveResponse | PlainMessage<RunGiveResponse> | undefined): boolean {
    return proto3.util.equals(RunGiveResponse, a, b);
  }
}

/**
 * @generated from message bag.RunCraftRequest
 */
export class RunCraftRequest extends Message<RunCraftRequest> {
  /**
   * @generated from field: int32 appId = 1;
   */
  appId = 0;

  /**
   * @generated from field: string key = 2;
   */
  key = "";

  /**
   * @generated from field: string identityId = 3;
   */
  identityId = "";

  /**
   * @generated from field: int32 recipeId = 4;
   */
  recipeId = 0;

  /**
   * @generated from field: optional string callbackUrl = 5;
   */
  callbackUrl?: string;

  /**
   * @generated from field: optional string callbackMetadata = 6;
   */
  callbackMetadata?: string;

  constructor(data?: PartialMessage<RunCraftRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bag.RunCraftRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "appId", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "identityId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "recipeId", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "callbackUrl", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 6, name: "callbackMetadata", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RunCraftRequest {
    return new RunCraftRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RunCraftRequest {
    return new RunCraftRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RunCraftRequest {
    return new RunCraftRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RunCraftRequest | PlainMessage<RunCraftRequest> | undefined, b: RunCraftRequest | PlainMessage<RunCraftRequest> | undefined): boolean {
    return proto3.util.equals(RunCraftRequest, a, b);
  }
}

/**
 * @generated from message bag.RunCraftResponse
 */
export class RunCraftResponse extends Message<RunCraftResponse> {
  /**
   * @generated from field: optional string response = 1;
   */
  response?: string;

  /**
   * @generated from field: optional int32 time = 2;
   */
  time?: number;

  constructor(data?: PartialMessage<RunCraftResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bag.RunCraftResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "time", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RunCraftResponse {
    return new RunCraftResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RunCraftResponse {
    return new RunCraftResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RunCraftResponse {
    return new RunCraftResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RunCraftResponse | PlainMessage<RunCraftResponse> | undefined, b: RunCraftResponse | PlainMessage<RunCraftResponse> | undefined): boolean {
    return proto3.util.equals(RunCraftResponse, a, b);
  }
}

/**
 * @generated from message bag.GetCraftStatusRequest
 */
export class GetCraftStatusRequest extends Message<GetCraftStatusRequest> {
  /**
   * @generated from field: int32 appId = 1;
   */
  appId = 0;

  /**
   * @generated from field: string key = 2;
   */
  key = "";

  /**
   * @generated from field: string identityId = 3;
   */
  identityId = "";

  constructor(data?: PartialMessage<GetCraftStatusRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bag.GetCraftStatusRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "appId", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "identityId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCraftStatusRequest {
    return new GetCraftStatusRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCraftStatusRequest {
    return new GetCraftStatusRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCraftStatusRequest {
    return new GetCraftStatusRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetCraftStatusRequest | PlainMessage<GetCraftStatusRequest> | undefined, b: GetCraftStatusRequest | PlainMessage<GetCraftStatusRequest> | undefined): boolean {
    return proto3.util.equals(GetCraftStatusRequest, a, b);
  }
}

/**
 * @generated from message bag.GetCraftStatusResponse
 */
export class GetCraftStatusResponse extends Message<GetCraftStatusResponse> {
  /**
   * @generated from field: optional string response = 1;
   */
  response?: string;

  /**
   * @generated from field: optional bool crafting = 2;
   */
  crafting?: boolean;

  constructor(data?: PartialMessage<GetCraftStatusResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bag.GetCraftStatusResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "crafting", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCraftStatusResponse {
    return new GetCraftStatusResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCraftStatusResponse {
    return new GetCraftStatusResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCraftStatusResponse {
    return new GetCraftStatusResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetCraftStatusResponse | PlainMessage<GetCraftStatusResponse> | undefined, b: GetCraftStatusResponse | PlainMessage<GetCraftStatusResponse> | undefined): boolean {
    return proto3.util.equals(GetCraftStatusResponse, a, b);
  }
}

/**
 * @generated from message bag.MakeOfferRequest
 */
export class MakeOfferRequest extends Message<MakeOfferRequest> {
  /**
   * @generated from field: int32 appId = 1;
   */
  appId = 0;

  /**
   * @generated from field: string key = 2;
   */
  key = "";

  /**
   * @generated from field: string sourceIdentityId = 3;
   */
  sourceIdentityId = "";

  /**
   * @generated from field: string targetIdentityId = 4;
   */
  targetIdentityId = "";

  /**
   * @generated from field: repeated bag.OfferItem offerToGive = 5;
   */
  offerToGive: OfferItem[] = [];

  /**
   * @generated from field: repeated bag.OfferItem offerToReceive = 6;
   */
  offerToReceive: OfferItem[] = [];

  /**
   * @generated from field: optional string callbackUrl = 7;
   */
  callbackUrl?: string;

  constructor(data?: PartialMessage<MakeOfferRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bag.MakeOfferRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "appId", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "sourceIdentityId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "targetIdentityId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "offerToGive", kind: "message", T: OfferItem, repeated: true },
    { no: 6, name: "offerToReceive", kind: "message", T: OfferItem, repeated: true },
    { no: 7, name: "callbackUrl", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MakeOfferRequest {
    return new MakeOfferRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MakeOfferRequest {
    return new MakeOfferRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MakeOfferRequest {
    return new MakeOfferRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MakeOfferRequest | PlainMessage<MakeOfferRequest> | undefined, b: MakeOfferRequest | PlainMessage<MakeOfferRequest> | undefined): boolean {
    return proto3.util.equals(MakeOfferRequest, a, b);
  }
}

/**
 * @generated from message bag.MakeOfferResponse
 */
export class MakeOfferResponse extends Message<MakeOfferResponse> {
  /**
   * @generated from field: optional string response = 1;
   */
  response?: string;

  /**
   * @generated from field: bool success = 2;
   */
  success = false;

  constructor(data?: PartialMessage<MakeOfferResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bag.MakeOfferResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MakeOfferResponse {
    return new MakeOfferResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MakeOfferResponse {
    return new MakeOfferResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MakeOfferResponse {
    return new MakeOfferResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MakeOfferResponse | PlainMessage<MakeOfferResponse> | undefined, b: MakeOfferResponse | PlainMessage<MakeOfferResponse> | undefined): boolean {
    return proto3.util.equals(MakeOfferResponse, a, b);
  }
}

