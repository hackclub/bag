generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum PermissionLevels {
  ADMIN
  WRITE
  WRITE_SPECIFIC
  READ_PRIVATE
  READ
}

model App {
  id              Int              @id @default(autoincrement())
  name            String           @unique
  key             String
  description     String?
  permissions     PermissionLevels @default(value: READ)
  specificApps    Int[]
  specificItems   String[]
  specificTrades  Int[]
  specificRecipes Int[]
  public          Boolean          @default(false)
  metadata        Json             @default("{}")
}

model Identity {
  slack           String           @id @unique
  inventory       Instance[]
  skills          SkillInstance[]
  permissions     PermissionLevels @default(value: READ)
  initiatorTrades Trade[]          @relation("initiator")
  receiverTrades  Trade[]          @relation("receiver")
  crafting        Crafting[]
  using           ActionInstance[]
  metadata        Json             @default("{}")
  specificApps    Int[]
  specificItems   String[]
  specificTrades  Int[]
  specificRecipes Int[]
  notifs          Boolean          @default(false)
}

model Item {
  name        String       @id @unique
  image       String?
  description String?
  reaction    String?
  commodity   Boolean      @default(false)
  tradable    Boolean      @default(true)
  instances   Instance[]
  public      Boolean      @default(false)
  metadata    Json         @default("{}")
  durability  Int          @default(100)
  recipeItem  RecipeItem[]
}

model Instance {
  id               Int             @id @default(autoincrement())
  itemId           String
  identityId       String?
  item             Item            @relation(fields: [itemId], references: [name])
  identity         Identity?       @relation(fields: [identityId], references: [slack])
  quantity         Int             @default(0)
  metadata         Json            @default("{}")
  public           Boolean         @default(true)
  trades           TradeInstance[]
  crafting         RecipeItem[]
  offersToGive    InstanceOfferToGive[]
  offersToReceive InstanceOfferToReceive[]
}

model Skill {
  name        String          @id @unique
  maxLevel    Int?
  description String?
  reaction    String?
  metadata    Json            @default("{}")
  recipe      Recipe[]        @relation("recipeSkills")
  havers      SkillInstance[]
}

model SkillInstance {
  id         Int      @id @default(autoincrement())
  skillId    String
  identityId String
  skill      Skill    @relation(fields: [skillId], references: [name])
  identity   Identity @relation(fields: [identityId], references: [slack])
  level      Int      @default(1)
  metadata   Json     @default("{}")
}

model Trade {
  id                  Int             @id @default(autoincrement())
  initiatorIdentityId String
  receiverIdentityId  String
  initiator           Identity        @relation("initiator", fields: [initiatorIdentityId], references: [slack])
  receiver            Identity        @relation("receiver", fields: [receiverIdentityId], references: [slack])
  initiatorTrades     TradeInstance[] @relation("initiatorTrades")
  receiverTrades      TradeInstance[] @relation("receiverTrades")
  initiatorAgreed     Boolean         @default(false)
  receiverAgreed      Boolean         @default(false)
  public              Boolean         @default(true)
  closed              Boolean         @default(false)
  channel             String?
  ts                  String?
  approved            Boolean         @default(true)
}

model TradeInstance {
  id              Int      @id @default(autoincrement())
  instanceId      Int
  instance        Instance @relation(fields: [instanceId], references: [id])
  initiatorTrades Trade[]  @relation("initiatorTrades")
  receiverTrades  Trade[]  @relation("receiverTrades")
  quantity        Int      @default(1)
}

model Crafting {
  id         Int          @id @default(autoincrement())
  identityId String
  identity   Identity     @relation(fields: [identityId], references: [slack])
  inputs     RecipeItem[] @relation("craftingInputs")
  recipeId   Int?
  recipe     Recipe?      @relation(fields: [recipeId], references: [id])
  channel    String?
  ts         String?
  done       Boolean      @default(false)
}

model RecipeItem {
  id             Int        @id @default(autoincrement())
  recipeItemId   String
  recipeItem     Item       @relation(fields: [recipeItemId], references: [name])
  instanceId     Int?
  instance       Instance?  @relation(fields: [instanceId], references: [id])
  quantity       Int        @default(1)
  inputs         Recipe[]   @relation("recipeInputs")
  outputs        Recipe[]   @relation("recipeOutputs")
  tools          Recipe[]   @relation("recipeTools")
  craftingInputs Crafting[] @relation("craftingInputs")
}

model Recipe {
  id          Int          @id @default(autoincrement())
  inputs      RecipeItem[] @relation("recipeInputs")
  skills      Skill[]      @relation("recipeSkills")
  outputs     RecipeItem[] @relation("recipeOutputs")
  tools       RecipeItem[] @relation("recipeTools")
  public      Boolean      @default(true)
  crafted     Crafting[]
  description String?
  time        Int          @default(1800000)
}

model Action {
  id        Int              @id @default(autoincrement())
  // locations and tools are used for identifying if the user can use said tools in said locations; also useful for the workflow at hackclub/bag-manifest
  locations String[]
  tools     String[]
  branch    Json
  using     ActionInstance[]
}

model ActionInstance {
  id         Int      @id @default(autoincrement())
  done       Boolean  @default(false)
  identityId String
  identity   Identity @relation(fields: [identityId], references: [slack])
  actionId   Int
  action     Action   @relation(fields: [actionId], references: [id])
}

enum LoggerLevels {
  ERROR
  GENERAL
}

model Logger {
  id       Int          @id @default(autoincrement())
  level    LoggerLevels @default(GENERAL)
  contents String
}

model Offer {
  id                 Int        @id @default(autoincrement())
  sourceIdentityId   String
  targetIdentityId   String
  instancesToGive    InstanceOfferToGive[]
  instancesToReceive InstanceOfferToReceive[]
  callbackUrl        String?
}

model InstanceOfferToGive {
  instanceId Int
  offerId    Int
  instance   Instance @relation(fields: [instanceId], references: [id])
  offer      Offer    @relation(fields: [offerId], references: [id])
  
  @@id([instanceId, offerId])
}

model InstanceOfferToReceive {
  instanceId Int
  offerId    Int
  instance   Instance @relation(fields: [instanceId], references: [id])
  offer      Offer    @relation(fields: [offerId], references: [id])
  
  @@id([instanceId, offerId])
}